"use strict";

/** @type {import('sequelize-cli').Migration} */
module.exports = {
    async up(queryInterface) {
        const { faker } = await import("@faker-js/faker/locale/vi");

        const courses = [];
        const courseTitles = [
            "L·∫≠p tr√¨nh JavaScript c∆° b·∫£n",
            "React.js t·ª´ c∆° b·∫£n ƒë·∫øn n√¢ng cao",
            "Node.js & Express to√†n t·∫≠p",
            "HTML & CSS c∆° b·∫£n cho ng∆∞·ªùi m·ªõi",
            "MongoDB cho ng∆∞·ªùi m·ªõi b·∫Øt ƒë·∫ßu",
            "Git & GitHub n√¢ng cao",
            "TypeScript chuy√™n s√¢u",
            "Vue.js to√†n t·∫≠p",
            "Next.js th·ª±c chi·∫øn",
            "Testing v·ªõi Jest",
        ];

        const usedSlugs = new Set();

        for (let i = 0; i < courseTitles.length; i++) {
            const titleBase = courseTitles[i];
            const isPro = faker.datatype.boolean();

            // üß© T·∫°o slug duy nh·∫•t
            let slug = faker.helpers.slugify(titleBase.toLowerCase());
            let suffix = 1;
            while (usedSlugs.has(slug)) {
                slug = `${slug}-${suffix}`.slice(0, 255);
                suffix++;
            }
            usedSlugs.add(slug);

            // üí∞ Sinh gi√° cho kho√° h·ªçc
            let price = 0;
            let old_price = 0;
            if (isPro) {
                price = faker.number.int({ min: 150000, max: 800000 });
                old_price = Math.round(
                    price * faker.number.float({ min: 1.1, max: 1.4 })
                );
            }

            // üë§ Gi·∫£ l·∫≠p creator_id (gi·∫£ s·ª≠ ƒë√£ c√≥ 5 users trong b·∫£ng users)
            const creator_id = faker.number.int({ min: 1, max: 5 });

            // üß† Sinh ng·∫´u nhi√™n c√°c n·ªôi dung h·ªçc v√† y√™u c·∫ßu
            const what_you_learn = faker.helpers.arrayElements(
                [
                    "Hi·ªÉu c√°ch ho·∫°t ƒë·ªông c·ªßa ng√¥n ng·ªØ",
                    "X√¢y d·ª±ng ·ª©ng d·ª•ng th·ª±c t·∫ø",
                    "T·ªëi ∆∞u m√£ ngu·ªìn",
                    "Hi·ªÉu r√µ v·ªÅ DOM v√† s·ª± ki·ªán",
                    "S·ª≠ d·ª•ng API v√† x·ª≠ l√Ω JSON",
                    "T·ªï ch·ª©c v√† qu·∫£n l√Ω d·ª± √°n",
                ],
                faker.number.int({ min: 3, max: 5 })
            );

            const requirement = faker.helpers.arrayElements(
                [
                    "Bi·∫øt HTML, CSS c∆° b·∫£n",
                    "C√≥ ki·∫øn th·ª©c JavaScript n·ªÅn t·∫£ng",
                    "C√≥ laptop c√° nh√¢n",
                    "Tinh th·∫ßn h·ªçc h·ªèi v√† ki√™n tr√¨",
                ],
                faker.number.int({ min: 2, max: 3 })
            );

            courses.push({
                creator_id,
                title: titleBase,
                description: faker.lorem.paragraphs(2),
                thumbnail: faker.image.urlLoremFlickr({
                    category: "technology",
                }),
                slug,
                what_you_learn: JSON.stringify(what_you_learn), // ‚úÖ chuy·ªÉn sang JSON string
                requirement: JSON.stringify(requirement), // ‚úÖ chuy·ªÉn sang JSON string
                level: faker.helpers.arrayElement([
                    "beginner",
                    "intermediate",
                    "advanced",
                ]),
                total_track: faker.number.int({ min: 3, max: 8 }),
                total_lesson: faker.number.int({ min: 20, max: 60 }),
                total_view: faker.number.int({ min: 500, max: 50000 }),
                total_duration: faker.number.int({ min: 100, max: 600 }),
                is_pro: isPro,
                old_price,
                price,
                created_at: new Date(),
                updated_at: new Date(),
            });
        }

        await queryInterface.bulkInsert("courses", courses, {
            ignoreDuplicates: true,
        });
    },

    async down(queryInterface) {
        await queryInterface.bulkDelete("courses", null, {});
    },
};
